"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Raft = exports.MetricsResponse = exports.WatchResponse = exports.Event = exports.MappingResponse = exports.SearchResponse = exports.ListIndexResponse = exports.DropIndexRequest = exports.CreateIndexRequest = exports.SearchRequest = exports.DeleteMetadataRequest = exports.SetMetadataRequest = exports.BulkDeleteResponse = exports.BulkDeleteRequest = exports.BulkDeleteElement = exports.BulkIndexResponse = exports.BulkIndexRequest = exports.DeleteRequest = exports.SetRequest = exports.GetResponse = exports.GetRequest = exports.Document = exports.ClusterResponse = exports.NodeResponse = exports.LeaveRequest = exports.MappingRequest = exports.JoinRequest = exports.Cluster = exports.Node = exports.Metadata = exports.ReadinessCheckResponse = exports.LivenessCheckResponse = exports.Event_Type = void 0;
// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "server.proto" (package "casper.search.engine.proto", syntax proto3)
// tslint:disable
const empty_1 = require("./empty");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const any_1 = require("./any");
/**
 * @generated from protobuf enum casper.search.engine.proto.Event.Type
 */
var Event_Type;
(function (Event_Type) {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    Event_Type[Event_Type["Unknown"] = 0] = "Unknown";
    /**
     * @generated from protobuf enum value: Join = 1;
     */
    Event_Type[Event_Type["Join"] = 1] = "Join";
    /**
     * @generated from protobuf enum value: Leave = 2;
     */
    Event_Type[Event_Type["Leave"] = 2] = "Leave";
    /**
     * @generated from protobuf enum value: Set = 3;
     */
    Event_Type[Event_Type["Set"] = 3] = "Set";
    /**
     * @generated from protobuf enum value: Delete = 4;
     */
    Event_Type[Event_Type["Delete"] = 4] = "Delete";
    /**
     * @generated from protobuf enum value: BulkIndex = 5;
     */
    Event_Type[Event_Type["BulkIndex"] = 5] = "BulkIndex";
    /**
     * @generated from protobuf enum value: BulkDelete = 6;
     */
    Event_Type[Event_Type["BulkDelete"] = 6] = "BulkDelete";
})(Event_Type || (exports.Event_Type = Event_Type = {}));
// @generated message type with reflection information, may provide speed optimized methods
class LivenessCheckResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.LivenessCheckResponse", [
            { no: 1, name: "alive", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.alive = false;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool alive */ 1:
                    message.alive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool alive = 1; */
        if (message.alive !== false)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.alive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.LivenessCheckResponse
 */
exports.LivenessCheckResponse = new LivenessCheckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadinessCheckResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.ReadinessCheckResponse", [
            { no: 1, name: "ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.ready = false;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool ready */ 1:
                    message.ready = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool ready = 1; */
        if (message.ready !== false)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.ready);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.ReadinessCheckResponse
 */
exports.ReadinessCheckResponse = new ReadinessCheckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Metadata$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.Metadata", [
            { no: 1, name: "grpc_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "http_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.grpcAddress = "";
        message.httpAddress = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string grpc_address */ 1:
                    message.grpcAddress = reader.string();
                    break;
                case /* string http_address */ 2:
                    message.httpAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string grpc_address = 1; */
        if (message.grpcAddress !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.grpcAddress);
        /* string http_address = 2; */
        if (message.httpAddress !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.httpAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.Metadata
 */
exports.Metadata = new Metadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Node$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.Node", [
            { no: 1, name: "raft_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => exports.Metadata },
            { no: 3, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.raftAddress = "";
        message.state = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string raft_address */ 1:
                    message.raftAddress = reader.string();
                    break;
                case /* casper.search.engine.proto.Metadata metadata */ 2:
                    message.metadata = exports.Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* string state */ 3:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string raft_address = 1; */
        if (message.raftAddress !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.raftAddress);
        /* casper.search.engine.proto.Metadata metadata = 2; */
        if (message.metadata)
            exports.Metadata.internalBinaryWrite(message.metadata, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* string state = 3; */
        if (message.state !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.Node
 */
exports.Node = new Node$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.Cluster", [
            { no: 1, name: "nodes", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => exports.Node } },
            { no: 2, name: "leader", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.nodes = {};
        message.leader = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, casper.search.engine.proto.Node> nodes */ 1:
                    this.binaryReadMap1(message.nodes, reader, options);
                    break;
                case /* string leader */ 2:
                    message.leader = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = exports.Node.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field casper.search.engine.proto.Cluster.nodes");
            }
        }
        map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : exports.Node.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<string, casper.search.engine.proto.Node> nodes = 1; */
        for (let k of globalThis.Object.keys(message.nodes)) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k);
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.Node.internalBinaryWrite(message.nodes[k], writer, options);
            writer.join().join();
        }
        /* string leader = 2; */
        if (message.leader !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.leader);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.Cluster
 */
exports.Cluster = new Cluster$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.JoinRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "node", kind: "message", T: () => exports.Node }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* casper.search.engine.proto.Node node */ 2:
                    message.node = exports.Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.id);
        /* casper.search.engine.proto.Node node = 2; */
        if (message.node)
            exports.Node.internalBinaryWrite(message.node, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.JoinRequest
 */
exports.JoinRequest = new JoinRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MappingRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.MappingRequest", [
            { no: 1, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string index */ 1:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string index = 1; */
        if (message.index !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.MappingRequest
 */
exports.MappingRequest = new MappingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.LeaveRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.LeaveRequest
 */
exports.LeaveRequest = new LeaveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.NodeResponse", [
            { no: 1, name: "node", kind: "message", T: () => exports.Node }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* casper.search.engine.proto.Node node */ 1:
                    message.node = exports.Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* casper.search.engine.proto.Node node = 1; */
        if (message.node)
            exports.Node.internalBinaryWrite(message.node, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.NodeResponse
 */
exports.NodeResponse = new NodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClusterResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.ClusterResponse", [
            { no: 1, name: "cluster", kind: "message", T: () => exports.Cluster }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* casper.search.engine.proto.Cluster cluster */ 1:
                    message.cluster = exports.Cluster.internalBinaryRead(reader, reader.uint32(), options, message.cluster);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* casper.search.engine.proto.Cluster cluster = 1; */
        if (message.cluster)
            exports.Cluster.internalBinaryWrite(message.cluster, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.ClusterResponse
 */
exports.ClusterResponse = new ClusterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Document$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.Document", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fields", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.fields = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bytes fields */ 2:
                    message.fields = reader.bytes();
                    break;
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.id);
        /* bytes fields = 2; */
        if (message.fields.length)
            writer.tag(2, runtime_1.WireType.LengthDelimited).bytes(message.fields);
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.Document
 */
exports.Document = new Document$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.GetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.id);
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.GetRequest
 */
exports.GetRequest = new GetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.GetResponse", [
            { no: 1, name: "fields", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.fields = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes fields */ 1:
                    message.fields = reader.bytes();
                    break;
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes fields = 1; */
        if (message.fields.length)
            writer.tag(1, runtime_1.WireType.LengthDelimited).bytes(message.fields);
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.GetResponse
 */
exports.GetResponse = new GetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.SetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fields", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.fields = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bytes fields */ 2:
                    message.fields = reader.bytes();
                    break;
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.id);
        /* bytes fields = 2; */
        if (message.fields.length)
            writer.tag(2, runtime_1.WireType.LengthDelimited).bytes(message.fields);
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.SetRequest
 */
exports.SetRequest = new SetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.DeleteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.id);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.DeleteRequest
 */
exports.DeleteRequest = new DeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkIndexRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.BulkIndexRequest", [
            { no: 1, name: "data", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.data = [];
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes data */ 1:
                    message.data.push(reader.bytes());
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bytes data = 1; */
        for (let i = 0; i < message.data.length; i++)
            writer.tag(1, runtime_1.WireType.LengthDelimited).bytes(message.data[i]);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.BulkIndexRequest
 */
exports.BulkIndexRequest = new BulkIndexRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkIndexResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.BulkIndexResponse", [
            { no: 1, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.count = 0;
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 count */ 1:
                    message.count = reader.int32();
                    break;
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 count = 1; */
        if (message.count !== 0)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.count);
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.BulkIndexResponse
 */
exports.BulkIndexResponse = new BulkIndexResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkDeleteElement$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.BulkDeleteElement", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.BulkDeleteElement
 */
exports.BulkDeleteElement = new BulkDeleteElement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkDeleteRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.BulkDeleteRequest", [
            { no: 1, name: "requests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.BulkDeleteElement },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.requests = [];
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated casper.search.engine.proto.BulkDeleteElement requests */ 1:
                    message.requests.push(exports.BulkDeleteElement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated casper.search.engine.proto.BulkDeleteElement requests = 1; */
        for (let i = 0; i < message.requests.length; i++)
            exports.BulkDeleteElement.internalBinaryWrite(message.requests[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.BulkDeleteRequest
 */
exports.BulkDeleteRequest = new BulkDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkDeleteResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.BulkDeleteResponse", [
            { no: 1, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.count = 0;
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 count */ 1:
                    message.count = reader.int32();
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 count = 1; */
        if (message.count !== 0)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.count);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.BulkDeleteResponse
 */
exports.BulkDeleteResponse = new BulkDeleteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetMetadataRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.SetMetadataRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => exports.Metadata }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* casper.search.engine.proto.Metadata metadata */ 2:
                    message.metadata = exports.Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.id);
        /* casper.search.engine.proto.Metadata metadata = 2; */
        if (message.metadata)
            exports.Metadata.internalBinaryWrite(message.metadata, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.SetMetadataRequest
 */
exports.SetMetadataRequest = new SetMetadataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMetadataRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.DeleteMetadataRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.DeleteMetadataRequest
 */
exports.DeleteMetadataRequest = new DeleteMetadataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.SearchRequest", [
            { no: 1, name: "search_request", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.searchRequest = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes search_request */ 1:
                    message.searchRequest = reader.bytes();
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes search_request = 1; */
        if (message.searchRequest.length)
            writer.tag(1, runtime_1.WireType.LengthDelimited).bytes(message.searchRequest);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.SearchRequest
 */
exports.SearchRequest = new SearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateIndexRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.CreateIndexRequest", [
            { no: 1, name: "index_request", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.indexRequest = new Uint8Array(0);
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes index_request */ 1:
                    message.indexRequest = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes index_request = 1; */
        if (message.indexRequest.length)
            writer.tag(1, runtime_1.WireType.LengthDelimited).bytes(message.indexRequest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.CreateIndexRequest
 */
exports.CreateIndexRequest = new CreateIndexRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DropIndexRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.DropIndexRequest", [
            { no: 1, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string index */ 1:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string index = 1; */
        if (message.index !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.DropIndexRequest
 */
exports.DropIndexRequest = new DropIndexRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListIndexResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.ListIndexResponse", [
            { no: 1, name: "response", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.MappingResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.response = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated casper.search.engine.proto.MappingResponse response */ 1:
                    message.response.push(exports.MappingResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated casper.search.engine.proto.MappingResponse response = 1; */
        for (let i = 0; i < message.response.length; i++)
            exports.MappingResponse.internalBinaryWrite(message.response[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.ListIndexResponse
 */
exports.ListIndexResponse = new ListIndexResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.SearchResponse", [
            { no: 1, name: "search_result", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.searchResult = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes search_result */ 1:
                    message.searchResult = reader.bytes();
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes search_result = 1; */
        if (message.searchResult.length)
            writer.tag(1, runtime_1.WireType.LengthDelimited).bytes(message.searchResult);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.SearchResponse
 */
exports.SearchResponse = new SearchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MappingResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.MappingResponse", [
            { no: 1, name: "mapping", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mapping = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes mapping */ 1:
                    message.mapping = reader.bytes();
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes mapping = 1; */
        if (message.mapping.length)
            writer.tag(1, runtime_1.WireType.LengthDelimited).bytes(message.mapping);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.MappingResponse
 */
exports.MappingResponse = new MappingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.Event", [
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "type", kind: "enum", T: () => ["casper.search.engine.proto.Event.Type", Event_Type] },
            { no: 2, name: "data", kind: "message", T: () => any_1.Any }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.index = "";
        message.type = 0;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                case /* casper.search.engine.proto.Event.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* google.protobuf.Any data */ 2:
                    message.data = any_1.Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.index);
        /* casper.search.engine.proto.Event.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.type);
        /* google.protobuf.Any data = 2; */
        if (message.data)
            any_1.Any.internalBinaryWrite(message.data, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.Event
 */
exports.Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WatchResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.WatchResponse", [
            { no: 1, name: "event", kind: "message", T: () => exports.Event }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* casper.search.engine.proto.Event event */ 1:
                    message.event = exports.Event.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* casper.search.engine.proto.Event event = 1; */
        if (message.event)
            exports.Event.internalBinaryWrite(message.event, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.WatchResponse
 */
exports.WatchResponse = new WatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetricsResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("casper.search.engine.proto.MetricsResponse", [
            { no: 1, name: "metrics", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.metrics = new Uint8Array(0);
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes metrics */ 1:
                    message.metrics = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes metrics = 1; */
        if (message.metrics.length)
            writer.tag(1, runtime_1.WireType.LengthDelimited).bytes(message.metrics);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.MetricsResponse
 */
exports.MetricsResponse = new MetricsResponse$Type();
/**
 * @generated ServiceType for protobuf service casper.search.engine.proto.Raft
 */
exports.Raft = new runtime_rpc_1.ServiceType("casper.search.engine.proto.Raft", [
    { name: "LivenessCheck", options: { "google.api.http": { get: "/liveness_check" } }, I: empty_1.Empty, O: exports.LivenessCheckResponse },
    { name: "ReadinessCheck", options: { "google.api.http": { get: "/readiness_check" } }, I: empty_1.Empty, O: exports.ReadinessCheckResponse },
    { name: "Node", options: { "google.api.http": { get: "/node" } }, I: empty_1.Empty, O: exports.NodeResponse },
    { name: "Join", options: { "google.api.http": { put: "/cluster/{id}", body: "node" } }, I: exports.JoinRequest, O: empty_1.Empty },
    { name: "Cluster", options: { "google.api.http": { get: "/cluster" } }, I: empty_1.Empty, O: exports.ClusterResponse },
    { name: "Leave", options: { "google.api.http": { delete: "/cluster/{id}" } }, I: exports.LeaveRequest, O: empty_1.Empty },
    { name: "Snapshot", options: { "google.api.http": { get: "/snapshot" } }, I: empty_1.Empty, O: empty_1.Empty },
    { name: "BulkIndex", options: { "google.api.http": { put: "/documents", body: "*" } }, I: exports.BulkIndexRequest, O: exports.BulkIndexResponse },
    { name: "BulkDelete", options: { "google.api.http": { delete: "/documents", body: "*" } }, I: exports.BulkDeleteRequest, O: exports.BulkDeleteResponse },
    { name: "Get", options: { "google.api.http": { get: "/documents/{id=**}" } }, I: exports.GetRequest, O: exports.GetResponse },
    { name: "Set", options: { "google.api.http": { put: "/documents/{id=**}", body: "*" } }, I: exports.SetRequest, O: empty_1.Empty },
    { name: "Delete", options: { "google.api.http": { delete: "/documents/{id=**}" } }, I: exports.DeleteRequest, O: empty_1.Empty },
    { name: "Search", options: { "google.api.http": { post: "/search", body: "*" } }, I: exports.SearchRequest, O: exports.SearchResponse },
    { name: "Mapping", options: { "google.api.http": { get: "/mapping/{index}" } }, I: exports.MappingRequest, O: exports.MappingResponse },
    { name: "CreateIndex", options: { "google.api.http": { post: "/create", body: "*" } }, I: exports.CreateIndexRequest, O: exports.MappingResponse },
    { name: "DropIndex", options: { "google.api.http": { post: "/drop", body: "*" } }, I: exports.DropIndexRequest, O: empty_1.Empty },
    { name: "ListIndexes", options: { "google.api.http": { get: "/list" } }, I: empty_1.Empty, O: exports.ListIndexResponse },
    { name: "Watch", serverStreaming: true, options: {}, I: empty_1.Empty, O: exports.WatchResponse },
    { name: "Metrics", options: { "google.api.http": { get: "/metrics" } }, I: empty_1.Empty, O: exports.MetricsResponse }
]);
