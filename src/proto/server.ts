// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "server.proto" (package "casper.search.engine.proto", syntax proto3)
// tslint:disable
import { Empty } from "./empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "./any";
/**
 * @generated from protobuf message casper.search.engine.proto.LivenessCheckResponse
 */
export interface LivenessCheckResponse {
    /**
     * @generated from protobuf field: bool alive = 1;
     */
    alive: boolean;
}
/**
 * @generated from protobuf message casper.search.engine.proto.ReadinessCheckResponse
 */
export interface ReadinessCheckResponse {
    /**
     * @generated from protobuf field: bool ready = 1;
     */
    ready: boolean;
}
/**
 * @generated from protobuf message casper.search.engine.proto.Metadata
 */
export interface Metadata {
    /**
     * @generated from protobuf field: string grpc_address = 1;
     */
    grpcAddress: string;
    /**
     * @generated from protobuf field: string http_address = 2;
     */
    httpAddress: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.Node
 */
export interface Node {
    /**
     * @generated from protobuf field: string raft_address = 1;
     */
    raftAddress: string;
    /**
     * @generated from protobuf field: casper.search.engine.proto.Metadata metadata = 2;
     */
    metadata?: Metadata;
    /**
     * @generated from protobuf field: string state = 3;
     */
    state: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.Cluster
 */
export interface Cluster {
    /**
     * @generated from protobuf field: map<string, casper.search.engine.proto.Node> nodes = 1;
     */
    nodes: {
        [key: string]: Node;
    };
    /**
     * @generated from protobuf field: string leader = 2;
     */
    leader: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.JoinRequest
 */
export interface JoinRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: casper.search.engine.proto.Node node = 2;
     */
    node?: Node;
}
/**
 * @generated from protobuf message casper.search.engine.proto.MappingRequest
 */
export interface MappingRequest {
    /**
     * @generated from protobuf field: string index = 1;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.LeaveRequest
 */
export interface LeaveRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.NodeResponse
 */
export interface NodeResponse {
    /**
     * @generated from protobuf field: casper.search.engine.proto.Node node = 1;
     */
    node?: Node;
}
/**
 * @generated from protobuf message casper.search.engine.proto.ClusterResponse
 */
export interface ClusterResponse {
    /**
     * @generated from protobuf field: casper.search.engine.proto.Cluster cluster = 1;
     */
    cluster?: Cluster;
}
/**
 * @generated from protobuf message casper.search.engine.proto.Document
 */
export interface Document {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bytes fields = 2;
     */
    fields: Uint8Array;
    /**
     * @generated from protobuf field: string index = 3;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.GetRequest
 */
export interface GetRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string index = 3;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.GetResponse
 */
export interface GetResponse {
    /**
     * @generated from protobuf field: bytes fields = 1;
     */
    fields: Uint8Array;
    /**
     * @generated from protobuf field: string index = 3;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.SetRequest
 */
export interface SetRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bytes fields = 2;
     */
    fields: Uint8Array;
    /**
     * @generated from protobuf field: string index = 3;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.DeleteRequest
 */
export interface DeleteRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string index = 2;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.BulkIndexRequest
 */
export interface BulkIndexRequest {
    /**
     * @generated from protobuf field: repeated bytes data = 1;
     */
    data: Uint8Array[];
    /**
     * @generated from protobuf field: string index = 2;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.BulkIndexResponse
 */
export interface BulkIndexResponse {
    /**
     * @generated from protobuf field: int32 count = 1;
     */
    count: number;
    /**
     * @generated from protobuf field: string index = 3;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.BulkDeleteElement
 */
export interface BulkDeleteElement {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.BulkDeleteRequest
 */
export interface BulkDeleteRequest {
    /**
     * @generated from protobuf field: repeated casper.search.engine.proto.BulkDeleteElement requests = 1;
     */
    requests: BulkDeleteElement[];
    /**
     * @generated from protobuf field: string index = 2;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.BulkDeleteResponse
 */
export interface BulkDeleteResponse {
    /**
     * @generated from protobuf field: int32 count = 1;
     */
    count: number;
    /**
     * @generated from protobuf field: string index = 2;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.SetMetadataRequest
 */
export interface SetMetadataRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: casper.search.engine.proto.Metadata metadata = 2;
     */
    metadata?: Metadata;
}
/**
 * @generated from protobuf message casper.search.engine.proto.DeleteMetadataRequest
 */
export interface DeleteMetadataRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.SearchRequest
 */
export interface SearchRequest {
    /**
     * @generated from protobuf field: bytes search_request = 1;
     */
    searchRequest: Uint8Array;
    /**
     * @generated from protobuf field: string index = 2;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.CreateIndexRequest
 */
export interface CreateIndexRequest {
    /**
     * @generated from protobuf field: bytes index_request = 1;
     */
    indexRequest: Uint8Array;
}
/**
 * @generated from protobuf message casper.search.engine.proto.DropIndexRequest
 */
export interface DropIndexRequest {
    /**
     * @generated from protobuf field: string index = 1;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.ListIndexResponse
 */
export interface ListIndexResponse {
    /**
     * @generated from protobuf field: repeated casper.search.engine.proto.MappingResponse response = 1;
     */
    response: MappingResponse[];
}
/**
 * @generated from protobuf message casper.search.engine.proto.SearchResponse
 */
export interface SearchResponse {
    /**
     * @generated from protobuf field: bytes search_result = 1;
     */
    searchResult: Uint8Array;
    /**
     * @generated from protobuf field: string index = 2;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.MappingResponse
 */
export interface MappingResponse {
    /**
     * @generated from protobuf field: bytes mapping = 1;
     */
    mapping: Uint8Array;
    /**
     * @generated from protobuf field: string index = 2;
     */
    index: string;
}
/**
 * @generated from protobuf message casper.search.engine.proto.Event
 */
export interface Event {
    /**
     * @generated from protobuf field: string index = 3;
     */
    index: string;
    /**
     * @generated from protobuf field: casper.search.engine.proto.Event.Type type = 1;
     */
    type: Event_Type;
    /**
     * @generated from protobuf field: google.protobuf.Any data = 2;
     */
    data?: Any;
}
/**
 * @generated from protobuf enum casper.search.engine.proto.Event.Type
 */
export enum Event_Type {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    Unknown = 0,
    /**
     * @generated from protobuf enum value: Join = 1;
     */
    Join = 1,
    /**
     * @generated from protobuf enum value: Leave = 2;
     */
    Leave = 2,
    /**
     * @generated from protobuf enum value: Set = 3;
     */
    Set = 3,
    /**
     * @generated from protobuf enum value: Delete = 4;
     */
    Delete = 4,
    /**
     * @generated from protobuf enum value: BulkIndex = 5;
     */
    BulkIndex = 5,
    /**
     * @generated from protobuf enum value: BulkDelete = 6;
     */
    BulkDelete = 6
}
/**
 * @generated from protobuf message casper.search.engine.proto.WatchResponse
 */
export interface WatchResponse {
    /**
     * @generated from protobuf field: casper.search.engine.proto.Event event = 1;
     */
    event?: Event;
}
/**
 * @generated from protobuf message casper.search.engine.proto.MetricsResponse
 */
export interface MetricsResponse {
    /**
     * @generated from protobuf field: bytes metrics = 1;
     */
    metrics: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class LivenessCheckResponse$Type extends MessageType<LivenessCheckResponse> {
    constructor() {
        super("casper.search.engine.proto.LivenessCheckResponse", [
            { no: 1, name: "alive", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LivenessCheckResponse>): LivenessCheckResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.alive = false;
        if (value !== undefined)
            reflectionMergePartial<LivenessCheckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LivenessCheckResponse): LivenessCheckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool alive */ 1:
                    message.alive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LivenessCheckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool alive = 1; */
        if (message.alive !== false)
            writer.tag(1, WireType.Varint).bool(message.alive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.LivenessCheckResponse
 */
export const LivenessCheckResponse = new LivenessCheckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadinessCheckResponse$Type extends MessageType<ReadinessCheckResponse> {
    constructor() {
        super("casper.search.engine.proto.ReadinessCheckResponse", [
            { no: 1, name: "ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReadinessCheckResponse>): ReadinessCheckResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ready = false;
        if (value !== undefined)
            reflectionMergePartial<ReadinessCheckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadinessCheckResponse): ReadinessCheckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool ready */ 1:
                    message.ready = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadinessCheckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool ready = 1; */
        if (message.ready !== false)
            writer.tag(1, WireType.Varint).bool(message.ready);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.ReadinessCheckResponse
 */
export const ReadinessCheckResponse = new ReadinessCheckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Metadata$Type extends MessageType<Metadata> {
    constructor() {
        super("casper.search.engine.proto.Metadata", [
            { no: 1, name: "grpc_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "http_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Metadata>): Metadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.grpcAddress = "";
        message.httpAddress = "";
        if (value !== undefined)
            reflectionMergePartial<Metadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metadata): Metadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string grpc_address */ 1:
                    message.grpcAddress = reader.string();
                    break;
                case /* string http_address */ 2:
                    message.httpAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Metadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string grpc_address = 1; */
        if (message.grpcAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.grpcAddress);
        /* string http_address = 2; */
        if (message.httpAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.httpAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.Metadata
 */
export const Metadata = new Metadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Node$Type extends MessageType<Node> {
    constructor() {
        super("casper.search.engine.proto.Node", [
            { no: 1, name: "raft_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => Metadata },
            { no: 3, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Node>): Node {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.raftAddress = "";
        message.state = "";
        if (value !== undefined)
            reflectionMergePartial<Node>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Node): Node {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string raft_address */ 1:
                    message.raftAddress = reader.string();
                    break;
                case /* casper.search.engine.proto.Metadata metadata */ 2:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* string state */ 3:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Node, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string raft_address = 1; */
        if (message.raftAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.raftAddress);
        /* casper.search.engine.proto.Metadata metadata = 2; */
        if (message.metadata)
            Metadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string state = 3; */
        if (message.state !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.Node
 */
export const Node = new Node$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster$Type extends MessageType<Cluster> {
    constructor() {
        super("casper.search.engine.proto.Cluster", [
            { no: 1, name: "nodes", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Node } },
            { no: 2, name: "leader", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Cluster>): Cluster {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodes = {};
        message.leader = "";
        if (value !== undefined)
            reflectionMergePartial<Cluster>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster): Cluster {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, casper.search.engine.proto.Node> nodes */ 1:
                    this.binaryReadMap1(message.nodes, reader, options);
                    break;
                case /* string leader */ 2:
                    message.leader = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: Cluster["nodes"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Cluster["nodes"] | undefined, val: Cluster["nodes"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Node.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field casper.search.engine.proto.Cluster.nodes");
            }
        }
        map[key ?? ""] = val ?? Node.create();
    }
    internalBinaryWrite(message: Cluster, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, casper.search.engine.proto.Node> nodes = 1; */
        for (let k of globalThis.Object.keys(message.nodes)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Node.internalBinaryWrite(message.nodes[k], writer, options);
            writer.join().join();
        }
        /* string leader = 2; */
        if (message.leader !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.leader);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.Cluster
 */
export const Cluster = new Cluster$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinRequest$Type extends MessageType<JoinRequest> {
    constructor() {
        super("casper.search.engine.proto.JoinRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<JoinRequest>): JoinRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<JoinRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinRequest): JoinRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* casper.search.engine.proto.Node node */ 2:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* casper.search.engine.proto.Node node = 2; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.JoinRequest
 */
export const JoinRequest = new JoinRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MappingRequest$Type extends MessageType<MappingRequest> {
    constructor() {
        super("casper.search.engine.proto.MappingRequest", [
            { no: 1, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MappingRequest>): MappingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<MappingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MappingRequest): MappingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string index */ 1:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MappingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string index = 1; */
        if (message.index !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.MappingRequest
 */
export const MappingRequest = new MappingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveRequest$Type extends MessageType<LeaveRequest> {
    constructor() {
        super("casper.search.engine.proto.LeaveRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LeaveRequest>): LeaveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<LeaveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveRequest): LeaveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeaveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.LeaveRequest
 */
export const LeaveRequest = new LeaveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeResponse$Type extends MessageType<NodeResponse> {
    constructor() {
        super("casper.search.engine.proto.NodeResponse", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<NodeResponse>): NodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NodeResponse): NodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* casper.search.engine.proto.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* casper.search.engine.proto.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.NodeResponse
 */
export const NodeResponse = new NodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClusterResponse$Type extends MessageType<ClusterResponse> {
    constructor() {
        super("casper.search.engine.proto.ClusterResponse", [
            { no: 1, name: "cluster", kind: "message", T: () => Cluster }
        ]);
    }
    create(value?: PartialMessage<ClusterResponse>): ClusterResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClusterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClusterResponse): ClusterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* casper.search.engine.proto.Cluster cluster */ 1:
                    message.cluster = Cluster.internalBinaryRead(reader, reader.uint32(), options, message.cluster);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClusterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* casper.search.engine.proto.Cluster cluster = 1; */
        if (message.cluster)
            Cluster.internalBinaryWrite(message.cluster, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.ClusterResponse
 */
export const ClusterResponse = new ClusterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Document$Type extends MessageType<Document> {
    constructor() {
        super("casper.search.engine.proto.Document", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fields", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Document>): Document {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.fields = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<Document>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Document): Document {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bytes fields */ 2:
                    message.fields = reader.bytes();
                    break;
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Document, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bytes fields = 2; */
        if (message.fields.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.fields);
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.Document
 */
export const Document = new Document$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRequest$Type extends MessageType<GetRequest> {
    constructor() {
        super("casper.search.engine.proto.GetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetRequest>): GetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<GetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRequest): GetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.GetRequest
 */
export const GetRequest = new GetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetResponse$Type extends MessageType<GetResponse> {
    constructor() {
        super("casper.search.engine.proto.GetResponse", [
            { no: 1, name: "fields", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetResponse>): GetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fields = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<GetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetResponse): GetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes fields */ 1:
                    message.fields = reader.bytes();
                    break;
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes fields = 1; */
        if (message.fields.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.fields);
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.GetResponse
 */
export const GetResponse = new GetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetRequest$Type extends MessageType<SetRequest> {
    constructor() {
        super("casper.search.engine.proto.SetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fields", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetRequest>): SetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.fields = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<SetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetRequest): SetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bytes fields */ 2:
                    message.fields = reader.bytes();
                    break;
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bytes fields = 2; */
        if (message.fields.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.fields);
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.SetRequest
 */
export const SetRequest = new SetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequest$Type extends MessageType<DeleteRequest> {
    constructor() {
        super("casper.search.engine.proto.DeleteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRequest>): DeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequest): DeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.DeleteRequest
 */
export const DeleteRequest = new DeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkIndexRequest$Type extends MessageType<BulkIndexRequest> {
    constructor() {
        super("casper.search.engine.proto.BulkIndexRequest", [
            { no: 1, name: "data", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BulkIndexRequest>): BulkIndexRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<BulkIndexRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkIndexRequest): BulkIndexRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes data */ 1:
                    message.data.push(reader.bytes());
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkIndexRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes data = 1; */
        for (let i = 0; i < message.data.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data[i]);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.BulkIndexRequest
 */
export const BulkIndexRequest = new BulkIndexRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkIndexResponse$Type extends MessageType<BulkIndexResponse> {
    constructor() {
        super("casper.search.engine.proto.BulkIndexResponse", [
            { no: 1, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BulkIndexResponse>): BulkIndexResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.count = 0;
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<BulkIndexResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkIndexResponse): BulkIndexResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 count */ 1:
                    message.count = reader.int32();
                    break;
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkIndexResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 count = 1; */
        if (message.count !== 0)
            writer.tag(1, WireType.Varint).int32(message.count);
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.BulkIndexResponse
 */
export const BulkIndexResponse = new BulkIndexResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkDeleteElement$Type extends MessageType<BulkDeleteElement> {
    constructor() {
        super("casper.search.engine.proto.BulkDeleteElement", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BulkDeleteElement>): BulkDeleteElement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<BulkDeleteElement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkDeleteElement): BulkDeleteElement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkDeleteElement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.BulkDeleteElement
 */
export const BulkDeleteElement = new BulkDeleteElement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkDeleteRequest$Type extends MessageType<BulkDeleteRequest> {
    constructor() {
        super("casper.search.engine.proto.BulkDeleteRequest", [
            { no: 1, name: "requests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BulkDeleteElement },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BulkDeleteRequest>): BulkDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requests = [];
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<BulkDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkDeleteRequest): BulkDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated casper.search.engine.proto.BulkDeleteElement requests */ 1:
                    message.requests.push(BulkDeleteElement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated casper.search.engine.proto.BulkDeleteElement requests = 1; */
        for (let i = 0; i < message.requests.length; i++)
            BulkDeleteElement.internalBinaryWrite(message.requests[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.BulkDeleteRequest
 */
export const BulkDeleteRequest = new BulkDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkDeleteResponse$Type extends MessageType<BulkDeleteResponse> {
    constructor() {
        super("casper.search.engine.proto.BulkDeleteResponse", [
            { no: 1, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BulkDeleteResponse>): BulkDeleteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.count = 0;
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<BulkDeleteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkDeleteResponse): BulkDeleteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 count */ 1:
                    message.count = reader.int32();
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkDeleteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 count = 1; */
        if (message.count !== 0)
            writer.tag(1, WireType.Varint).int32(message.count);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.BulkDeleteResponse
 */
export const BulkDeleteResponse = new BulkDeleteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetMetadataRequest$Type extends MessageType<SetMetadataRequest> {
    constructor() {
        super("casper.search.engine.proto.SetMetadataRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => Metadata }
        ]);
    }
    create(value?: PartialMessage<SetMetadataRequest>): SetMetadataRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<SetMetadataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetMetadataRequest): SetMetadataRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* casper.search.engine.proto.Metadata metadata */ 2:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetMetadataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* casper.search.engine.proto.Metadata metadata = 2; */
        if (message.metadata)
            Metadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.SetMetadataRequest
 */
export const SetMetadataRequest = new SetMetadataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMetadataRequest$Type extends MessageType<DeleteMetadataRequest> {
    constructor() {
        super("casper.search.engine.proto.DeleteMetadataRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteMetadataRequest>): DeleteMetadataRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteMetadataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteMetadataRequest): DeleteMetadataRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteMetadataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.DeleteMetadataRequest
 */
export const DeleteMetadataRequest = new DeleteMetadataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchRequest$Type extends MessageType<SearchRequest> {
    constructor() {
        super("casper.search.engine.proto.SearchRequest", [
            { no: 1, name: "search_request", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SearchRequest>): SearchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchRequest = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<SearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchRequest): SearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes search_request */ 1:
                    message.searchRequest = reader.bytes();
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes search_request = 1; */
        if (message.searchRequest.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.searchRequest);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.SearchRequest
 */
export const SearchRequest = new SearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateIndexRequest$Type extends MessageType<CreateIndexRequest> {
    constructor() {
        super("casper.search.engine.proto.CreateIndexRequest", [
            { no: 1, name: "index_request", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CreateIndexRequest>): CreateIndexRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.indexRequest = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<CreateIndexRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateIndexRequest): CreateIndexRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes index_request */ 1:
                    message.indexRequest = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateIndexRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes index_request = 1; */
        if (message.indexRequest.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.indexRequest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.CreateIndexRequest
 */
export const CreateIndexRequest = new CreateIndexRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DropIndexRequest$Type extends MessageType<DropIndexRequest> {
    constructor() {
        super("casper.search.engine.proto.DropIndexRequest", [
            { no: 1, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DropIndexRequest>): DropIndexRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<DropIndexRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DropIndexRequest): DropIndexRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string index */ 1:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DropIndexRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string index = 1; */
        if (message.index !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.DropIndexRequest
 */
export const DropIndexRequest = new DropIndexRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListIndexResponse$Type extends MessageType<ListIndexResponse> {
    constructor() {
        super("casper.search.engine.proto.ListIndexResponse", [
            { no: 1, name: "response", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MappingResponse }
        ]);
    }
    create(value?: PartialMessage<ListIndexResponse>): ListIndexResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = [];
        if (value !== undefined)
            reflectionMergePartial<ListIndexResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListIndexResponse): ListIndexResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated casper.search.engine.proto.MappingResponse response */ 1:
                    message.response.push(MappingResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListIndexResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated casper.search.engine.proto.MappingResponse response = 1; */
        for (let i = 0; i < message.response.length; i++)
            MappingResponse.internalBinaryWrite(message.response[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.ListIndexResponse
 */
export const ListIndexResponse = new ListIndexResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchResponse$Type extends MessageType<SearchResponse> {
    constructor() {
        super("casper.search.engine.proto.SearchResponse", [
            { no: 1, name: "search_result", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SearchResponse>): SearchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchResult = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<SearchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchResponse): SearchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes search_result */ 1:
                    message.searchResult = reader.bytes();
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes search_result = 1; */
        if (message.searchResult.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.searchResult);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.SearchResponse
 */
export const SearchResponse = new SearchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MappingResponse$Type extends MessageType<MappingResponse> {
    constructor() {
        super("casper.search.engine.proto.MappingResponse", [
            { no: 1, name: "mapping", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MappingResponse>): MappingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mapping = new Uint8Array(0);
        message.index = "";
        if (value !== undefined)
            reflectionMergePartial<MappingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MappingResponse): MappingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes mapping */ 1:
                    message.mapping = reader.bytes();
                    break;
                case /* string index */ 2:
                    message.index = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MappingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes mapping = 1; */
        if (message.mapping.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.mapping);
        /* string index = 2; */
        if (message.index !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.MappingResponse
 */
export const MappingResponse = new MappingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("casper.search.engine.proto.Event", [
            { no: 3, name: "index", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "type", kind: "enum", T: () => ["casper.search.engine.proto.Event.Type", Event_Type] },
            { no: 2, name: "data", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.index = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string index */ 3:
                    message.index = reader.string();
                    break;
                case /* casper.search.engine.proto.Event.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* google.protobuf.Any data */ 2:
                    message.data = Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string index = 3; */
        if (message.index !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.index);
        /* casper.search.engine.proto.Event.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* google.protobuf.Any data = 2; */
        if (message.data)
            Any.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WatchResponse$Type extends MessageType<WatchResponse> {
    constructor() {
        super("casper.search.engine.proto.WatchResponse", [
            { no: 1, name: "event", kind: "message", T: () => Event }
        ]);
    }
    create(value?: PartialMessage<WatchResponse>): WatchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WatchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WatchResponse): WatchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* casper.search.engine.proto.Event event */ 1:
                    message.event = Event.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WatchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* casper.search.engine.proto.Event event = 1; */
        if (message.event)
            Event.internalBinaryWrite(message.event, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.WatchResponse
 */
export const WatchResponse = new WatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetricsResponse$Type extends MessageType<MetricsResponse> {
    constructor() {
        super("casper.search.engine.proto.MetricsResponse", [
            { no: 1, name: "metrics", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<MetricsResponse>): MetricsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.metrics = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<MetricsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetricsResponse): MetricsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes metrics */ 1:
                    message.metrics = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetricsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes metrics = 1; */
        if (message.metrics.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.metrics);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message casper.search.engine.proto.MetricsResponse
 */
export const MetricsResponse = new MetricsResponse$Type();
/**
 * @generated ServiceType for protobuf service casper.search.engine.proto.Raft
 */
export const Raft = new ServiceType("casper.search.engine.proto.Raft", [
    { name: "LivenessCheck", options: { "google.api.http": { get: "/liveness_check" } }, I: Empty, O: LivenessCheckResponse },
    { name: "ReadinessCheck", options: { "google.api.http": { get: "/readiness_check" } }, I: Empty, O: ReadinessCheckResponse },
    { name: "Node", options: { "google.api.http": { get: "/node" } }, I: Empty, O: NodeResponse },
    { name: "Join", options: { "google.api.http": { put: "/cluster/{id}", body: "node" } }, I: JoinRequest, O: Empty },
    { name: "Cluster", options: { "google.api.http": { get: "/cluster" } }, I: Empty, O: ClusterResponse },
    { name: "Leave", options: { "google.api.http": { delete: "/cluster/{id}" } }, I: LeaveRequest, O: Empty },
    { name: "Snapshot", options: { "google.api.http": { get: "/snapshot" } }, I: Empty, O: Empty },
    { name: "BulkIndex", options: { "google.api.http": { put: "/documents", body: "*" } }, I: BulkIndexRequest, O: BulkIndexResponse },
    { name: "BulkDelete", options: { "google.api.http": { delete: "/documents", body: "*" } }, I: BulkDeleteRequest, O: BulkDeleteResponse },
    { name: "Get", options: { "google.api.http": { get: "/documents/{id=**}" } }, I: GetRequest, O: GetResponse },
    { name: "Set", options: { "google.api.http": { put: "/documents/{id=**}", body: "*" } }, I: SetRequest, O: Empty },
    { name: "Delete", options: { "google.api.http": { delete: "/documents/{id=**}" } }, I: DeleteRequest, O: Empty },
    { name: "Search", options: { "google.api.http": { post: "/search", body: "*" } }, I: SearchRequest, O: SearchResponse },
    { name: "Mapping", options: { "google.api.http": { get: "/mapping/{index}" } }, I: MappingRequest, O: MappingResponse },
    { name: "CreateIndex", options: { "google.api.http": { post: "/create", body: "*" } }, I: CreateIndexRequest, O: MappingResponse },
    { name: "DropIndex", options: { "google.api.http": { post: "/drop", body: "*" } }, I: DropIndexRequest, O: Empty },
    { name: "ListIndexes", options: { "google.api.http": { get: "/list" } }, I: Empty, O: ListIndexResponse },
    { name: "Watch", serverStreaming: true, options: {}, I: Empty, O: WatchResponse },
    { name: "Metrics", options: { "google.api.http": { get: "/metrics" } }, I: Empty, O: MetricsResponse }
]);
